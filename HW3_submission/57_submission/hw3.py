import random
from copy import deepcopy
from itertools import product, combinations
from pprint import pprint

ids = ['318792827', '321659187']
DIMENSIONS = (10, 10)

NEIGHBOURS_DICT = {(0, 0): [(1, 0), (0, 1)],
 (0, 1): [(0, 0), (1, 1), (0, 2)],
 (0, 2): [(0, 1), (1, 2), (0, 3)],
 (0, 3): [(0, 2), (1, 3), (0, 4)],
 (0, 4): [(0, 3), (1, 4), (0, 5)],
 (0, 5): [(0, 4), (1, 5), (0, 6)],
 (0, 6): [(0, 5), (1, 6), (0, 7)],
 (0, 7): [(0, 6), (1, 7), (0, 8)],
 (0, 8): [(0, 7), (1, 8), (0, 9)],
 (0, 9): [(0, 8), (1, 9)],
 (1, 0): [(0, 0), (2, 0), (1, 1)],
 (1, 1): [(0, 1), (1, 0), (2, 1), (1, 2)],
 (1, 2): [(0, 2), (1, 1), (2, 2), (1, 3)],
 (1, 3): [(0, 3), (1, 2), (2, 3), (1, 4)],
 (1, 4): [(0, 4), (1, 3), (2, 4), (1, 5)],
 (1, 5): [(0, 5), (1, 4), (2, 5), (1, 6)],
 (1, 6): [(0, 6), (1, 5), (2, 6), (1, 7)],
 (1, 7): [(0, 7), (1, 6), (2, 7), (1, 8)],
 (1, 8): [(0, 8), (1, 7), (2, 8), (1, 9)],
 (1, 9): [(0, 9), (1, 8), (2, 9)],
 (2, 0): [(1, 0), (3, 0), (2, 1)],
 (2, 1): [(1, 1), (2, 0), (3, 1), (2, 2)],
 (2, 2): [(1, 2), (2, 1), (3, 2), (2, 3)],
 (2, 3): [(1, 3), (2, 2), (3, 3), (2, 4)],
 (2, 4): [(1, 4), (2, 3), (3, 4), (2, 5)],
 (2, 5): [(1, 5), (2, 4), (3, 5), (2, 6)],
 (2, 6): [(1, 6), (2, 5), (3, 6), (2, 7)],
 (2, 7): [(1, 7), (2, 6), (3, 7), (2, 8)],
 (2, 8): [(1, 8), (2, 7), (3, 8), (2, 9)],
 (2, 9): [(1, 9), (2, 8), (3, 9)],
 (3, 0): [(2, 0), (4, 0), (3, 1)],
 (3, 1): [(2, 1), (3, 0), (4, 1), (3, 2)],
 (3, 2): [(2, 2), (3, 1), (4, 2), (3, 3)],
 (3, 3): [(2, 3), (3, 2), (4, 3), (3, 4)],
 (3, 4): [(2, 4), (3, 3), (4, 4), (3, 5)],
 (3, 5): [(2, 5), (3, 4), (4, 5), (3, 6)],
 (3, 6): [(2, 6), (3, 5), (4, 6), (3, 7)],
 (3, 7): [(2, 7), (3, 6), (4, 7), (3, 8)],
 (3, 8): [(2, 8), (3, 7), (4, 8), (3, 9)],
 (3, 9): [(2, 9), (3, 8), (4, 9)],
 (4, 0): [(3, 0), (5, 0), (4, 1)],
 (4, 1): [(3, 1), (4, 0), (5, 1), (4, 2)],
 (4, 2): [(3, 2), (4, 1), (5, 2), (4, 3)],
 (4, 3): [(3, 3), (4, 2), (5, 3), (4, 4)],
 (4, 4): [(3, 4), (4, 3), (5, 4), (4, 5)],
 (4, 5): [(3, 5), (4, 4), (5, 5), (4, 6)],
 (4, 6): [(3, 6), (4, 5), (5, 6), (4, 7)],
 (4, 7): [(3, 7), (4, 6), (5, 7), (4, 8)],
 (4, 8): [(3, 8), (4, 7), (5, 8), (4, 9)],
 (4, 9): [(3, 9), (4, 8), (5, 9)],
 (5, 0): [(4, 0), (6, 0), (5, 1)],
 (5, 1): [(4, 1), (5, 0), (6, 1), (5, 2)],
 (5, 2): [(4, 2), (5, 1), (6, 2), (5, 3)],
 (5, 3): [(4, 3), (5, 2), (6, 3), (5, 4)],
 (5, 4): [(4, 4), (5, 3), (6, 4), (5, 5)],
 (5, 5): [(4, 5), (5, 4), (6, 5), (5, 6)],
 (5, 6): [(4, 6), (5, 5), (6, 6), (5, 7)],
 (5, 7): [(4, 7), (5, 6), (6, 7), (5, 8)],
 (5, 8): [(4, 8), (5, 7), (6, 8), (5, 9)],
 (5, 9): [(4, 9), (5, 8), (6, 9)],
 (6, 0): [(5, 0), (7, 0), (6, 1)],
 (6, 1): [(5, 1), (6, 0), (7, 1), (6, 2)],
 (6, 2): [(5, 2), (6, 1), (7, 2), (6, 3)],
 (6, 3): [(5, 3), (6, 2), (7, 3), (6, 4)],
 (6, 4): [(5, 4), (6, 3), (7, 4), (6, 5)],
 (6, 5): [(5, 5), (6, 4), (7, 5), (6, 6)],
 (6, 6): [(5, 6), (6, 5), (7, 6), (6, 7)],
 (6, 7): [(5, 7), (6, 6), (7, 7), (6, 8)],
 (6, 8): [(5, 8), (6, 7), (7, 8), (6, 9)],
 (6, 9): [(5, 9), (6, 8), (7, 9)],
 (7, 0): [(6, 0), (8, 0), (7, 1)],
 (7, 1): [(6, 1), (7, 0), (8, 1), (7, 2)],
 (7, 2): [(6, 2), (7, 1), (8, 2), (7, 3)],
 (7, 3): [(6, 3), (7, 2), (8, 3), (7, 4)],
 (7, 4): [(6, 4), (7, 3), (8, 4), (7, 5)],
 (7, 5): [(6, 5), (7, 4), (8, 5), (7, 6)],
 (7, 6): [(6, 6), (7, 5), (8, 6), (7, 7)],
 (7, 7): [(6, 7), (7, 6), (8, 7), (7, 8)],
 (7, 8): [(6, 8), (7, 7), (8, 8), (7, 9)],
 (7, 9): [(6, 9), (7, 8), (8, 9)],
 (8, 0): [(7, 0), (9, 0), (8, 1)],
 (8, 1): [(7, 1), (8, 0), (9, 1), (8, 2)],
 (8, 2): [(7, 2), (8, 1), (9, 2), (8, 3)],
 (8, 3): [(7, 3), (8, 2), (9, 3), (8, 4)],
 (8, 4): [(7, 4), (8, 3), (9, 4), (8, 5)],
 (8, 5): [(7, 5), (8, 4), (9, 5), (8, 6)],
 (8, 6): [(7, 6), (8, 5), (9, 6), (8, 7)],
 (8, 7): [(7, 7), (8, 6), (9, 7), (8, 8)],
 (8, 8): [(7, 8), (8, 7), (9, 8), (8, 9)],
 (8, 9): [(7, 9), (8, 8), (9, 9)],
 (9, 0): [(8, 0), (9, 1)],
 (9, 1): [(8, 1), (9, 0), (9, 2)],
 (9, 2): [(8, 2), (9, 1), (9, 3)],
 (9, 3): [(8, 3), (9, 2), (9, 4)],
 (9, 4): [(8, 4), (9, 3), (9, 5)],
 (9, 5): [(8, 5), (9, 4), (9, 6)],
 (9, 6): [(8, 6), (9, 5), (9, 7)],
 (9, 7): [(8, 7), (9, 6), (9, 8)],
 (9, 8): [(8, 8), (9, 7), (9, 9)],
 (9, 9): [(8, 9), (9, 8)]}
SECOND_NEIGBOURS_DICT = {(0, 0): [(2, 0), (0, 2), (1, 1)],
 (0, 1): [(2, 1), (0, 3), (1, 2)],
 (0, 2): [(0, 0), (2, 2), (0, 4), (1, 3)],
 (0, 3): [(0, 1), (2, 3), (0, 5), (1, 4)],
 (0, 4): [(0, 2), (2, 4), (0, 6), (1, 5)],
 (0, 5): [(0, 3), (2, 5), (0, 7), (1, 6)],
 (0, 6): [(0, 4), (2, 6), (0, 8), (1, 7)],
 (0, 7): [(0, 5), (2, 7), (0, 9), (1, 8)],
 (0, 8): [(0, 6), (2, 8), (1, 9)],
 (0, 9): [(0, 7), (2, 9)],
 (1, 0): [(3, 0), (1, 2), (0, 1), (2, 1)],
 (1, 1): [(3, 1), (1, 3), (0, 0), (0, 2), (2, 2)],
 (1, 2): [(1, 0), (3, 2), (1, 4), (0, 1), (0, 3), (2, 3)],
 (1, 3): [(1, 1), (3, 3), (1, 5), (0, 2), (0, 4), (2, 4)],
 (1, 4): [(1, 2), (3, 4), (1, 6), (0, 3), (0, 5), (2, 5)],
 (1, 5): [(1, 3), (3, 5), (1, 7), (0, 4), (0, 6), (2, 6)],
 (1, 6): [(1, 4), (3, 6), (1, 8), (0, 5), (0, 7), (2, 7)],
 (1, 7): [(1, 5), (3, 7), (1, 9), (0, 6), (0, 8), (2, 8)],
 (1, 8): [(1, 6), (3, 8), (0, 7), (0, 9), (2, 9)],
 (1, 9): [(1, 7), (3, 9), (0, 8)],
 (2, 0): [(0, 0), (4, 0), (2, 2), (1, 1), (3, 1)],
 (2, 1): [(0, 1), (4, 1), (2, 3), (1, 0), (1, 2), (3, 2)],
 (2, 2): [(0, 2), (2, 0), (4, 2), (2, 4), (1, 1), (1, 3), (3, 3)],
 (2, 3): [(0, 3), (2, 1), (4, 3), (2, 5), (1, 2), (1, 4), (3, 4)],
 (2, 4): [(0, 4), (2, 2), (4, 4), (2, 6), (1, 3), (1, 5), (3, 5)],
 (2, 5): [(0, 5), (2, 3), (4, 5), (2, 7), (1, 4), (1, 6), (3, 6)],
 (2, 6): [(0, 6), (2, 4), (4, 6), (2, 8), (1, 5), (1, 7), (3, 7)],
 (2, 7): [(0, 7), (2, 5), (4, 7), (2, 9), (1, 6), (1, 8), (3, 8)],
 (2, 8): [(0, 8), (2, 6), (4, 8), (1, 7), (1, 9), (3, 9)],
 (2, 9): [(0, 9), (2, 7), (4, 9), (1, 8)],
 (3, 0): [(1, 0), (5, 0), (3, 2), (2, 1), (4, 1)],
 (3, 1): [(1, 1), (5, 1), (3, 3), (2, 0), (2, 2), (4, 2)],
 (3, 2): [(1, 2), (3, 0), (5, 2), (3, 4), (2, 1), (2, 3), (4, 3)],
 (3, 3): [(1, 3), (3, 1), (5, 3), (3, 5), (2, 2), (2, 4), (4, 4)],
 (3, 4): [(1, 4), (3, 2), (5, 4), (3, 6), (2, 3), (2, 5), (4, 5)],
 (3, 5): [(1, 5), (3, 3), (5, 5), (3, 7), (2, 4), (2, 6), (4, 6)],
 (3, 6): [(1, 6), (3, 4), (5, 6), (3, 8), (2, 5), (2, 7), (4, 7)],
 (3, 7): [(1, 7), (3, 5), (5, 7), (3, 9), (2, 6), (2, 8), (4, 8)],
 (3, 8): [(1, 8), (3, 6), (5, 8), (2, 7), (2, 9), (4, 9)],
 (3, 9): [(1, 9), (3, 7), (5, 9), (2, 8)],
 (4, 0): [(2, 0), (6, 0), (4, 2), (3, 1), (5, 1)],
 (4, 1): [(2, 1), (6, 1), (4, 3), (3, 0), (3, 2), (5, 2)],
 (4, 2): [(2, 2), (4, 0), (6, 2), (4, 4), (3, 1), (3, 3), (5, 3)],
 (4, 3): [(2, 3), (4, 1), (6, 3), (4, 5), (3, 2), (3, 4), (5, 4)],
 (4, 4): [(2, 4), (4, 2), (6, 4), (4, 6), (3, 3), (3, 5), (5, 5)],
 (4, 5): [(2, 5), (4, 3), (6, 5), (4, 7), (3, 4), (3, 6), (5, 6)],
 (4, 6): [(2, 6), (4, 4), (6, 6), (4, 8), (3, 5), (3, 7), (5, 7)],
 (4, 7): [(2, 7), (4, 5), (6, 7), (4, 9), (3, 6), (3, 8), (5, 8)],
 (4, 8): [(2, 8), (4, 6), (6, 8), (3, 7), (3, 9), (5, 9)],
 (4, 9): [(2, 9), (4, 7), (6, 9), (3, 8)],
 (5, 0): [(3, 0), (7, 0), (5, 2), (4, 1), (6, 1)],
 (5, 1): [(3, 1), (7, 1), (5, 3), (4, 0), (4, 2), (6, 2)],
 (5, 2): [(3, 2), (5, 0), (7, 2), (5, 4), (4, 1), (4, 3), (6, 3)],
 (5, 3): [(3, 3), (5, 1), (7, 3), (5, 5), (4, 2), (4, 4), (6, 4)],
 (5, 4): [(3, 4), (5, 2), (7, 4), (5, 6), (4, 3), (4, 5), (6, 5)],
 (5, 5): [(3, 5), (5, 3), (7, 5), (5, 7), (4, 4), (4, 6), (6, 6)],
 (5, 6): [(3, 6), (5, 4), (7, 6), (5, 8), (4, 5), (4, 7), (6, 7)],
 (5, 7): [(3, 7), (5, 5), (7, 7), (5, 9), (4, 6), (4, 8), (6, 8)],
 (5, 8): [(3, 8), (5, 6), (7, 8), (4, 7), (4, 9), (6, 9)],
 (5, 9): [(3, 9), (5, 7), (7, 9), (4, 8)],
 (6, 0): [(4, 0), (8, 0), (6, 2), (5, 1), (7, 1)],
 (6, 1): [(4, 1), (8, 1), (6, 3), (5, 0), (5, 2), (7, 2)],
 (6, 2): [(4, 2), (6, 0), (8, 2), (6, 4), (5, 1), (5, 3), (7, 3)],
 (6, 3): [(4, 3), (6, 1), (8, 3), (6, 5), (5, 2), (5, 4), (7, 4)],
 (6, 4): [(4, 4), (6, 2), (8, 4), (6, 6), (5, 3), (5, 5), (7, 5)],
 (6, 5): [(4, 5), (6, 3), (8, 5), (6, 7), (5, 4), (5, 6), (7, 6)],
 (6, 6): [(4, 6), (6, 4), (8, 6), (6, 8), (5, 5), (5, 7), (7, 7)],
 (6, 7): [(4, 7), (6, 5), (8, 7), (6, 9), (5, 6), (5, 8), (7, 8)],
 (6, 8): [(4, 8), (6, 6), (8, 8), (5, 7), (5, 9), (7, 9)],
 (6, 9): [(4, 9), (6, 7), (8, 9), (5, 8)],
 (7, 0): [(5, 0), (9, 0), (7, 2), (6, 1), (8, 1)],
 (7, 1): [(5, 1), (9, 1), (7, 3), (6, 0), (6, 2), (8, 2)],
 (7, 2): [(5, 2), (7, 0), (9, 2), (7, 4), (6, 1), (6, 3), (8, 3)],
 (7, 3): [(5, 3), (7, 1), (9, 3), (7, 5), (6, 2), (6, 4), (8, 4)],
 (7, 4): [(5, 4), (7, 2), (9, 4), (7, 6), (6, 3), (6, 5), (8, 5)],
 (7, 5): [(5, 5), (7, 3), (9, 5), (7, 7), (6, 4), (6, 6), (8, 6)],
 (7, 6): [(5, 6), (7, 4), (9, 6), (7, 8), (6, 5), (6, 7), (8, 7)],
 (7, 7): [(5, 7), (7, 5), (9, 7), (7, 9), (6, 6), (6, 8), (8, 8)],
 (7, 8): [(5, 8), (7, 6), (9, 8), (6, 7), (6, 9), (8, 9)],
 (7, 9): [(5, 9), (7, 7), (9, 9), (6, 8)],
 (8, 0): [(6, 0), (8, 2), (7, 1), (9, 1)],
 (8, 1): [(6, 1), (8, 3), (7, 0), (7, 2), (9, 2)],
 (8, 2): [(6, 2), (8, 0), (8, 4), (7, 1), (7, 3), (9, 3)],
 (8, 3): [(6, 3), (8, 1), (8, 5), (7, 2), (7, 4), (9, 4)],
 (8, 4): [(6, 4), (8, 2), (8, 6), (7, 3), (7, 5), (9, 5)],
 (8, 5): [(6, 5), (8, 3), (8, 7), (7, 4), (7, 6), (9, 6)],
 (8, 6): [(6, 6), (8, 4), (8, 8), (7, 5), (7, 7), (9, 7)],
 (8, 7): [(6, 7), (8, 5), (8, 9), (7, 6), (7, 8), (9, 8)],
 (8, 8): [(6, 8), (8, 6), (7, 7), (7, 9), (9, 9)],
 (8, 9): [(6, 9), (8, 7), (7, 8)],
 (9, 0): [(7, 0), (9, 2), (8, 1)],
 (9, 1): [(7, 1), (9, 3), (8, 0), (8, 2)],
 (9, 2): [(7, 2), (9, 0), (9, 4), (8, 1), (8, 3)],
 (9, 3): [(7, 3), (9, 1), (9, 5), (8, 2), (8, 4)],
 (9, 4): [(7, 4), (9, 2), (9, 6), (8, 3), (8, 5)],
 (9, 5): [(7, 5), (9, 3), (9, 7), (8, 4), (8, 6)],
 (9, 6): [(7, 6), (9, 4), (9, 8), (8, 5), (8, 7)],
 (9, 7): [(7, 7), (9, 5), (9, 9), (8, 6), (8, 8)],
 (9, 8): [(7, 8), (9, 6), (8, 7), (8, 9)],
 (9, 9): [(7, 9), (9, 7), (8, 8)]}



# TODO add heuristic which scores the healthy cells
# TODO add heuristic which scores the sick cells
# TODO add heuristic which scores the actions

class Agent:

    def __init__(self, initial_state, zone_of_control, order,
                 sick_weights=(-1, 0.7, -0.1, -0.05, -0.2, 0, 0, 0, -0.4, 0.2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
                 healthy_weights=(-0.1, 0.1, -1.1, -1, 0.0, -0.1, 0, 0, 0, 0, -0.05, 0, 0, 0, 0, 0, -0.15, 0.05, 0.0, 0),
                                 num_medics=1, num_police=2):
        self.current_state = initial_state
        self.zoc = zone_of_control
        self.num_medics = num_medics
        self.num_police = num_police
        self.order = order

        # Heurustic variables
        self.num_params = 20
        self.neighbours_count = self.initialize_neighbours_count()
        self.sick_weights = sick_weights
        self.healthy_weights = healthy_weights
        self.quarantine_cutoff = -100
        self.vaccinate_cutoff = float('inf')
        self.param2idx = {
            'nH': 0,  # Stands for neighbours healthy, sick, etc. in your zoc
            'nHo': 1,  # Stands for neighbours healthy, sick, etc. in your opponents zoc
            'nS': 2,
            'nSo': 3,
            'nI': 4,
            'nIo': 5,
            'nU': 4,
            'nUo': 5,
            'nQ': 6,
            'nQo': 7,
            'n2H': 8,  # Stands for second neighbours healthy, sick, etc. in your zoc
            'n2Ho': 9,  # Stands for second neighbours healthy, sick, etc. in your opponents zoc
            'n2S': 10,
            'n2So': 11,
            'n2U': 12,
            'n2Uo': 13,
            'n2I': 12,
            'n2Io': 13,
            'n2Q': 14,
            'n2Qo': 15,
            'neighours': 16,
            'o-neighbours': 17,
            '2neighours': 18,
            '0-2neighours': 19
        }

    def initialize_neighbours_count(self):
        neighbours_count = {}
        for i in range(DIMENSIONS[0]):
            for j in range(DIMENSIONS[1]):
                count = [0, 0, 0, 0]
                for neighbour in NEIGHBOURS_DICT[(i, j)]:
                    if neighbour in self.zoc:
                        count[0] += 1
                    else:
                        count[1] += 1
                for second_neighbour in SECOND_NEIGBOURS_DICT[(i, j)]:
                    if second_neighbour in self.zoc:
                        count[2] += 1
                    else:
                        count[3] += 1
                neighbours_count[(i, j)] = count
        return neighbours_count

    def act(self, state):
        return self.choose_actions(state)

    def choose_actions(self, state, your_turn: bool = True):
        sick_cells = []
        healthy_cells = []

        for i, row in enumerate(state):
            for j, cell in enumerate(row):
                if (your_turn and (i, j) in self.zoc) or (not your_turn and (i, j) not in self.zoc):
                    if cell.startswith('S'):
                        sick_cells.append((i, j))
                    elif cell == 'H':
                        healthy_cells.append((i, j))

        sick_scores = [(self.sick_heuristic(i, j, state), i, j) for (i, j) in sick_cells]
        healthy_scores = [(self.healthy_heuristic(i, j, state), i, j) for (i, j) in healthy_cells]

        actions = []
        if sick_scores:
            best_sick = sorted(sick_scores)[:self.num_police]
            for val, i, j in best_sick:
                if val < self.quarantine_cutoff:
                    actions.append(('quarantine', (i, j)))
        if healthy_scores:
            best_healthy = sorted(healthy_scores)[:self.num_medics]
            for val, i, j in best_healthy:
                if val < self.vaccinate_cutoff:
                    actions.append(('vaccinate', (i, j)))
        return actions

    def sick_heuristic(self, i, j, state):
        counts = self.count_neighbours_values(i, j, state)
        return sum(count * weight for (count, weight) in zip(counts, self.sick_weights))

    def healthy_heuristic(self, i, j, state):
        counts = self.count_neighbours_values(i, j, state)
        return sum(count * weight for (count, weight) in zip(counts, self.healthy_weights))

    def count_neighbours_values(self, i, j, state, your_turn=True):
        counts = [0] * (self.num_params - 4)
        for n_i, n_j in NEIGHBOURS_DICT[(i, j)]:
            value = state[n_i][n_j]
            if (your_turn and (n_i, n_j) in self.zoc) or \
                    (not your_turn and (n_i, n_j) not in self.zoc):
                idx = self.param2idx[f'n{value}']
            else:
                idx = self.param2idx[f'n{value}o']
            counts[idx] += 1

        for n2_i, n2_j in SECOND_NEIGBOURS_DICT[(i, j)]:
            value = state[n2_i][n2_j]
            if (your_turn and (n_i, n_j) in self.zoc) or \
                    (not your_turn and (n_i, n_j) not in self.zoc):
                idx = self.param2idx[f'n2{value}']
            else:
                idx = self.param2idx[f'n2{value}o']
            counts[idx] += 1

        counts += self.neighbours_count[(i, j)]
        return counts


    @staticmethod
    def apply_action(actions, state):
        for atomic_action in actions:
            effect, location = atomic_action[0], (atomic_action[1][0] + 1, atomic_action[1][1] + 1)
            if 'v' in effect:
                state[location] = 'I'
            else:
                state[location] = 'Q0'

    @staticmethod
    def change_state(state):
        new_state = deepcopy(state)

        # virus spread
        for i in range(1, DIMENSIONS[0] + 1):
            for j in range(1, DIMENSIONS[1] + 1):
                if state[(i, j)] == 'H' and ('S' in state[(i - 1, j)] or
                                             'S' in state[(i + 1, j)] or
                                             'S' in state[(i, j - 1)] or
                                             'S' in state[(i, j + 1)]):
                    new_state[(i, j)] = 'S0'

        # advancing sick counters
        for i in range(1, DIMENSIONS[0] + 1):
            for j in range(1, DIMENSIONS[1] + 1):
                if 'S' in state[(i, j)]:
                    turn = int(state[(i, j)][1])
                    if turn < 3:
                        new_state[(i, j)] = 'S' + str(turn + 1)
                    else:
                        new_state[(i, j)] = 'H'

                # advancing quarantine counters
                if 'Q' in state[(i, j)]:
                    turn = int(state[(i, j)][1])
                    if turn < 2:
                        new_state[(i, j)] = 'Q' + str(turn + 1)
                    else:
                        new_state[(i, j)] = 'H'

        state = new_state
        return state

def main():
    a_map = [['H', 'S', 'S', 'H', 'H', 'H', 'U', 'S', 'H', 'H'],
             ['H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'],
             ['H', 'U', 'U', 'H', 'H', 'U', 'H', 'H', 'H', 'H'],
             ['H', 'H', 'U', 'H', 'S', 'U', 'H', 'H', 'U', 'H'],
             ['H', 'H', 'U', 'H', 'H', 'U', 'H', 'H', 'S', 'H'],
             ['S', 'H', 'H', 'H', 'S', 'H', 'H', 'H', 'H', 'H'],
             ['H', 'H', 'H', 'S', 'U', 'U', 'H', 'H', 'H', 'U'],
             ['H', 'U', 'H', 'H', 'U', 'H', 'H', 'H', 'U', 'H'],
             ['H', 'H', 'U', 'H', 'H', 'U', 'H', 'S', 'U', 'H'],
             ['H', 'H', 'H', 'H', 'S', 'H', 'H', 'H', 'H', 'H']]

    zoc = {(3, 4), (5, 4), (5, 1), (10, 6), (8, 6), (2, 2), (10, 9), (1, 6), (2, 5), (7, 7), (6, 5), (4, 2), (4, 5),
           (4, 8), (5, 9), (9, 1), (10, 2), (9, 10), (2, 4), (10, 5), (2, 1), (10, 8), (2, 7), (6, 1), (6, 4), (7, 9),
           (4, 4), (4, 10), (5, 5), (8, 4), (5, 8), (10, 4), (1, 1), (10, 1), (10, 7), (1, 4), (2, 6), (1, 10), (7, 2),
           (6, 9), (7, 8)}

    agent = Agent(a_map, zoc, False)
    actions = agent.choose_actions(a_map, your_turn=False)
    for action in actions:
        print(action[1] in zoc)


if __name__ == '__main__':
    main()
